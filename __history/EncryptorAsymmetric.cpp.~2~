//---------------------------------------------------------------------------

#pragma hdrstop

#include "EncryptorAsymmetric.h"
#include "Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


EncryptorAsymmetric::EncryptorAsymmetric(TCodec* codec, TCryptographicLibrary *CryptographicLibrary1, TSignatory *Signatory1) {
	this->codec = codec;
	this->CryptographicLibrary1 = CryptographicLibrary1;
	this->javniKljucStream = nullptr;
	this->privatniKljucStream = nullptr;
	this->Signatory = Signatory1;
}


EncryptorAsymmetric::~EncryptorAsymmetric() {
	delete codec;
	delete CryptographicLibrary1;

	if(javniKljucStream){
		delete javniKljucStream;
	}

	if(privatniKljucStream){
		delete privatniKljucStream;
	}

}

String EncryptorAsymmetric::EncryptAsymmetric(String& tekst) {

	try {
		Signatory->LoadKeysFromStream(javniKljucStream, TKeyStoragePartSet() << partPublic);
	} catch (Exception &e) {
		ShowMessage("Greška pri uèitavanju javnog kljuèa: " + e.Message);
	}

	String sifriranaPoruka;

	try {
		codec->EncryptString(tekst, sifriranaPoruka, TEncoding::UTF8);
	} catch (Exception &e) {
		ShowMessage("Greška pri šifrovanju poruke: " + e.Message);
	}

	return sifriranaPoruka;
}



String EncryptorAsymmetric::DecryptAsymmetric(String& kriptiraniTekst) {
	privatniKljucStream = new TMemoryStream();
	String dekriptiranaPoruka;
	try{
		privatniKljucStream->LoadFromFile("privatniKljucServer.bin");
		Signatory->LoadKeysFromStream(privatniKljucStream, TKeyStoragePartSet() << partPrivate);
		codec->DecryptString(dekriptiranaPoruka, kriptiraniTekst, TEncoding::UTF8);
	}catch(Exception &e){
		dekriptiranaPoruka = "Greška pri dešifriranju poruke: " + e.Message;
	}

	delete privatniKljucStream;
   /*	String dekriptiranaPoruka;


		if (privatniKljucStream != nullptr) {
			// Uèitaj privatni kljuè iz streama
			Signatory->LoadKeysFromStream(privatniKljucStream, TKeyStoragePartSet() << partPrivate);
			try {
				codec->DecryptString(dekriptiranaPoruka, kriptiraniTekst, TEncoding::UTF8);
				}
            catch (Exception &e) {
		dekriptiranaPoruka = "Greška pri dešifriranju poruke: " + e.Message;
	} }
		else {
			dekriptiranaPoruka = "Nema privatnog kljuèa za dešifriranje.";
		}  */


	return dekriptiranaPoruka;
}


bool EncryptorAsymmetric::LoadPublicKey(const String& javniKljucIme) {
	javniKljucStream = new TMemoryStream();
	try{
		javniKljucStream->LoadFromFile(javniKljucIme);
	}catch (Exception &e) {
		return false;
	}


	return true;
}

/*bool EncryptorAsymmetric::LoadPrivateKey(const String& privatniKljucIme) {
		privatniKljucStream = new TMemoryStream();
		try{
			privatniKljucStream->LoadFromFile(privatniKljucIme);
		}catch(Exception &e){
			return false;
		}


		return true;
}      */
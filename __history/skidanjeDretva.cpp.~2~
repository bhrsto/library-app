//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include "skidanjeDretva.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall PreuzimanjeThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

__fastcall PreuzimanjeThread::PreuzimanjeThread(bool CreateSuspended, TProgressBar *ProgressBar, TIdHTTP *HttpClient , TIdSSLIOHandlerSocketOpenSSL *OpenSSL, String www, TLabel *LabelPostotak, int brzinaSkidanja)
	: TThread(CreateSuspended), ProgressBar(ProgressBar), HttpClient(HttpClient) , OpenSSL(OpenSSL), www(www), LabelPostotak(LabelPostotak), brzinaSkidanja(brzinaSkidanja)
{
	 Throttler = new TIdInterceptThrottler(NULL);
	 Throttler->BitsPerSec = brzinaSkidanja*1024*8; // 250 KB/s
	 HttpClient->Intercept = Throttler;


}
//---------------------------------------------------------------------------

void __fastcall PreuzimanjeThread::Execute()
{
	 try
	{
		TFileStream *FileStream = new TFileStream("nova_baza.xml", fmCreate);

		HttpClient->OnWorkBegin = HttpClientWorkBegin;
		HttpClient->OnWork = HttpClientWork;
		HttpClient->OnHeadersAvailable = OnHeadersAvailable;
		HttpClient->Get(www, FileStream);

		// Oslobodite resurse
		delete FileStream;
	}
	catch (Exception &E)
	{
		// Obradite greške preuzimanja ovdje
	}


	/*TFileStream *FileStream = new TFileStream("nova_baza.accdb", fmCreate);

	try
	{
		HttpClient = OnWorkBegin;
		HttpClient = OnWork;

		Synchronize([&]()
        {
			ProgressBar->Max = 100;
			ProgressBar->Position = 0; // Postavite poèetnu poziciju na 0%
		});


		HttpClient->GetAsync(www, FileStream);
		while (!Terminated)
		{
			Sleep(100);
			trenutniNapredak++;

			// Ažurirajte progres bar i prikažite trenutni napredak
		 Synchronize([&]()
			{
				ProgressBar->Position = trenutniNapredak;
				if (trenutniNapredak <= 100)
				{
					postotak = (trenutniNapredak * 100) / 100;
					LabelPostotak->Caption = IntToStr(postotak) + "%";
				}
			});

		if (trenutniNapredak > 100)
		break;;


		}
	}
	catch (Exception &E)
	{
		// Obradite greške preuzimanja ovdje
	}

	// Oslobodite resurse
	delete FileStream;; */
}

//---------------------------------------------------------------------------
__int64 contentLength;

void __fastcall PreuzimanjeThread::OnHeadersAvailable(TObject *ASender, TIdHeaderList *AHeaders, bool &VContinue)
{
	AnsiString contentLengthHeader = AHeaders->Values["Content-Length"];
	contentLength = StrToInt64Def(contentLengthHeader, 0);

	Synchronize([&]()
	{
		ProgressBar->Position = 0;
		ProgressBar->Max = static_cast<int>(contentLength);
		LabelPostotak->Caption = "0%";
	});
}


void __fastcall PreuzimanjeThread::HttpClientWorkBegin(TObject *ASender, TWorkMode AWorkMode, __int64 AWorkCountMax)
{

	// Postavite postotak na poèetak preuzimanja
	Synchronize([&]()
	{
		ProgressBar->Position = 0;
		ProgressBar->Max = AWorkCountMax; // Postavite na dobivenu velièinu datoteke
		LabelPostotak->Caption = "0%";
	});
}

//---------------------------------------------------------------------------

void __fastcall PreuzimanjeThread::HttpClientWork(TObject *ASender, TWorkMode AWorkMode, __int64 AWorkCount)
{

	// Ažurirajte progres bar tijekom preuzimanja
	int postotak = static_cast<int>(AWorkCount*100)/ProgressBar->Max;
	Synchronize([&]()
	{
		ProgressBar->Position = postotak;
		LabelPostotak->Caption = IntToStr(postotak) + "%";
	});
}

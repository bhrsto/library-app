//---------------------------------------------------------------------------

#pragma hdrstop

#include "Encryptor.h"
#include "Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Encryptor::Encryptor(TCodec* codec, TCryptographicLibrary *CryptographicLibrary1) {
	this->codec = codec;
	this->CryptographicLibrary1 = CryptographicLibrary1;
	this->javniKljucStream = nullptr;
	this->privatniKljucStream = nullptr;

	codec->Password = "Kljuc_koji_je_jako_dugacak";
}

Encryptor::Encryptor(TCodec* codec, TCryptographicLibrary *CryptographicLibrary1, TSignatory *Signatory1) {
	this->codec = codec;
	this->CryptographicLibrary1 = CryptographicLibrary1;
	this->javniKljucStream = nullptr;
	this->privatniKljucStream = nullptr;
	this->Signatory = Signatory1;
}

Encryptor::~Encryptor() {
	delete codec;
	delete CryptographicLibrary1;

	delete javniKljucStream;
	delete privatniKljucStream;
}


String Encryptor::EncryptSymmetric(String& tekst) {

   String kriptiranaPoruka;

	try {
		codec->EncryptString(tekst, kriptiranaPoruka, TEncoding::UTF8);
	} catch (Exception &e) {
		ShowMessage("Greška pri šifriranju: " + e.Message);
		kriptiranaPoruka = "";
	}

	return kriptiranaPoruka;
}

//---------------------------------------------------------------------


String Encryptor::DecryptSymmetric(String& kriptiraniTekst) {
	String dekriptiranaPoruka;

	try {
		// Provjerite jesu li postavke `codec` ispravno konfigurirane za dekripciju
		if (codec->CryptoLibrary == nullptr || codec->Password.IsEmpty() || codec->BlockCipherId.IsEmpty() || codec->ChainModeId.IsEmpty()) {
			ShowMessage("Nisu ispravno postavljene enkripcijske postavke.");
			return "";
		}

		// Dekriptirajte poruku
		codec->DecryptString(dekriptiranaPoruka, kriptiraniTekst, TEncoding::UTF8);
	} catch (Exception &e) {
		ShowMessage("Greška pri dešifriranju: " + e.Message);
		dekriptiranaPoruka = "";
	}

	return dekriptiranaPoruka;
}


String Encryptor::EncryptAsymmetric(String& tekst) {

	try {
		Signatory->LoadKeysFromStream(javniKljucStream, TKeyStoragePartSet() << partPublic);
	} catch (Exception &e) {
		ShowMessage("Greška pri uèitavanju javnog kljuèa: " + e.Message);
	}

	String sifriranaPoruka;

	try {
		codec->EncryptString(tekst, sifriranaPoruka, TEncoding::UTF8);
	} catch (Exception &e) {
		ShowMessage("Greška pri šifrovanju poruke: " + e.Message);
	}

	return sifriranaPoruka;
}



String Encryptor::DecryptAsymmetric(String& kriptiraniTekst) {
	String dekriptiranaPoruka;

	try {
		if (privatniKljucStream != nullptr) {
			// Uèitaj privatni kljuè iz streama
			Signatory->LoadKeysFromStream(privatniKljucStream, TKeyStoragePartSet() << partPrivate);
			codec->DecryptString(dekriptiranaPoruka, kriptiraniTekst, TEncoding::UTF8);
		} else {
			dekriptiranaPoruka = "Nema privatnog kljuèa za dešifriranje.";
		}
	} catch (Exception &e) {
		dekriptiranaPoruka = "Greška pri dešifriranju poruke: " + e.Message;
	}

	return dekriptiranaPoruka;
}


bool Encryptor::LoadPublicKey(const String& javniKljucIme) {
	if (javniKljucStream) {
		delete javniKljucStream;
	}
	javniKljucStream = new TMemoryStream();
	try{
		javniKljucStream->LoadFromFile(javniKljucIme);
	}catch (Exception &e) {
		return false;
	}


	return true;
}

bool Encryptor::LoadPrivateKey(const String& privatniKljucIme) {

	 if (privatniKljucStream) {
			delete privatniKljucStream;
		}
		privatniKljucStream = new TMemoryStream();
		try{
			privatniKljucStream->LoadFromFile(privatniKljucIme);
		}catch(Exception &e){
			return false;
		}


		return true;
}

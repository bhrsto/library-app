//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include<string>
#include <future>
#include <string>
#include <vector>
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "uTPLb_BaseNonVisualComponent"
#pragma link "uTPLb_Codec"
#pragma link "uTPLb_CryptographicLibrary"
#pragma link "uTPLb_Signatory"
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------


// ...

void __fastcall TForm1::Button1Click(TObject *Sender)
{

	TMemoryStream* javniKljucStream = new TMemoryStream();
	javniKljucStream->LoadFromFile("javniKljuc.bin");

	try {
		Signatory1->LoadKeysFromStream(javniKljucStream, TKeyStoragePartSet() << partPublic);
	} catch (Exception &e) {
		ShowMessage("Greška pri uèitavanju javnog kljuèa: " + e.Message);
	}

	// Šifrirajte poruku
	String porukaZaSifrovanje = Eime->Text + "," + Eprezime->Text + "," + Esifra->Text;
	String sifriranaPoruka;

	try {
		ACodec->EncryptString(porukaZaSifrovanje, sifriranaPoruka,  TEncoding::UTF8);
	} catch (Exception &e) {
		ShowMessage("Greška pri šifrovanju poruke: " + e.Message);
	}

	ShowMessage(sifriranaPoruka);

	// Sada šaljemo šifriranu poruku preko TCP veze
	TCP_klijent->Connect();
	if (TCP_klijent->Connected()) {
		TCP_klijent->Socket->WriteLn(sifriranaPoruka);

		// Ostatak koda za èitanje i obradu odgovora
	} else {
		ShowMessage("Nije moguæe uspostaviti vezu s poslužiteljem.");
		TCP_klijent->Disconnect();
	}

	delete javniKljucStream;
}



//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{
	UDP_klijent->ReceiveTimeout = 5000;
	Codec1->Password = "Kljuc_koji_je_jako_dugacak";
 
	String SifriranaPoruka;
	Codec1->EncryptString(Eautor->Text, SifriranaPoruka, TEncoding::UTF8);


	UDP_klijent->SendBuffer("127.0.0.1", 5555, ToBytes(SifriranaPoruka));

	String kriptiraneKnjige = UDP_klijent->ReceiveString();

	String knjige;
	Codec1->DecryptString(knjige, kriptiraneKnjige, TEncoding::UTF8);
	//ShowMessage(knjige); // tajna poruka

	TStrings* items = new TStringList;
	items->Delimiter = ',';
	items->DelimitedText = knjige;

	Memo2->Lines->Clear();
	Memo2->Lines->Add("Djela autora " + Eautor->Text + ":");
	for (int i = 0; i < items->Count; i++) {
			Memo2->Lines->Add(items->Strings[i]);
		}
	delete items;

	ShowMessage("Saljem serveru: " + SifriranaPoruka);

	ShowMessage("Primam od servera: " + kriptiraneKnjige);
}
//---------------------------------------------------------------------------



void __fastcall TForm1::BgeneriranjeKljucevaClick(TObject *Sender)
{
	 if (!FileExists("privatniKljuc.bin") || !FileExists("javniKljuc.bin")) {

	  TMemoryStream* privatniKljuc = new TMemoryStream();
	  TMemoryStream* javniKljuc = new TMemoryStream();

	try {
		if(Signatory1->GenerateKeys()){

			Signatory1->StoreKeysToStream(privatniKljuc,TKeyStoragePartSet() << partPrivate);
			Signatory1->StoreKeysToStream(javniKljuc,TKeyStoragePartSet() << partPublic);

			privatniKljuc->SaveToFile("privatniKljuc.bin");
			javniKljuc->SaveToFile("javniKljuc.bin");
		}
		ShowMessage("Kljuèevi su uspešno generisani i saèuvani.");
	} catch (Exception &e) {
		ShowMessage("Greška pri generisanju kljuèeva: " + e.Message);
	}

	delete privatniKljuc;
	delete javniKljuc;

	} else {
		ShowMessage("Kljuèevi veæ postoje.");
	}
}
//---------------------------------------------------------------------------

